
import random
from re import S
from array import array
from tabnanny import check

class Tictactoe:
    __board = [[' ',' ',' '],[' ',' ',' '],[' ',' ',' ']]
    __numMoves = 0
    __currentMove = (0, 0)
    def draw(self):
        print("___________________")
        for i in range (3):
            print("|", end = '')
            for j in range (3):
                print(" ", self.__board[i][j], end='  |')
            print()
            print("___________________")


    def checkwinner(self):
        a, b = self.current
        #check column
        if self.array[0][b] == self.array[1][b] == self.array[2][b]:
            return self.array[a][b]
        #check row
        if self.array[a][0] == self.array[a][1] == self.array[a][2]:
            return self.array[a][b]
        #check diagonal
        if self.array[0][0] == self.array[1][1] == self.array[2][2] and self.array[1][1] != ' ':
            return self.array[1][1]
        if self.array[2][0] == self.array[1][1] == self.array[0][2] and self.array[1][1] != ' ':
            return self.array[1][1]   
        #check tie
        if self.__numMoves == 9:
            return 'tie'
        return 'null'

    __score, __depth = 0, 0
    __move = (0, 0)

    def bestMove(self):
        #AI turn
        pointEva = -10
        mindepth = 100
        for i in range(3):
            for j in range(3):
                if self.__board[i][j] == ' ':
                    self.__board[i][j] = 'x'
                    self.__score, self.__depth = self.minimax(False, 0)
                    self.__board[i][j] = ' '
                    if (self.__score > pointEva) or (self.__score == pointEva and self.__depth < mindepth):
                        pointEva = self.__score
                        mindepth = self.__depth
                        self.__move = (i,j)
        return self.__move

    Rule = {'tie' : 0, 'o' : -1, 'x' : 1}

    def minimax(self, isMaxPlayer, __depth):
        if self.checkwinner() != 'null':
            return self.Rule[self.checkwinner()], self.__depth
        if isMaxPlayer:
            pointEva = -10
            for i in range(3):
                for j in range(3):
                    if self.__board[i][j] == ' ':
                        self.__board[i][j] = 'x'
                        self.__score, self.__depth = self.minimax(False, self.__depth + 1)
                        self.__board[i][j] = ' '
                        pointEva = max(self.__score, pointEva)
            return pointEva, self.__depth
        else:
            pointEva = 10
            for i in range(3):
                for j in range(3):
                    if self.__board[i][j] == ' ':
                        self.__board[i][j] = 'o'
                        self.__score, self.__depth = self.minimax(True, self.__depth + 1)
                        self.__board[i][j] = ' '
                        pointEva = min(self.__score, pointEva)
            return pointEva, self.__depth

    def game(self):
        print("# Choose your turn : ")
        print("- FIRST : 1")
        print("- THEN  : 2")
        t = int(input())
        if t == 2:
            x = random.randint(0, 2) 
            y = random.randint(0, 2) 
            self.__board[x][y] = 'x'
            self.draw()
            while True:          
                while True:
                    print("Input your desired position: ")
                    a, b = list(map(int, input().split()))
                    if self.__board[a][b] == ' ':
                        break
                self.__board[a][b] = 'o'
                self.__currentMove = a, b
                if self.checkwinner() != 'null':
                    break
                self.__move = self.bestMove()
                self.__board[self.__move[0]][self.__move[1]] = 'x'
                self.__currentMove = self.__move
                if self.checkwinner() != 'null':
                    break
                self.draw()
                self.__numMoves = self.__numMoves + 2
        else:
            self.draw()
            while True:            
                if self.checkwinner() != 'null':
                    break
                while True:
                    print("Input your desired position: ")
                    a, b = list(map(int, input().split()))
                    if self.__board[a][b] == ' ':
                        break
                self.__board[a][b] = 'o'
                self.__currentMove = a, b
                self.__numMoves = self.__numMoves + 1
                if self.checkwinner() != 'null':
                    break
                self.__move = self.bestMove()
                self.__board[self.__move[0]][self.__move[1]] = 'x'
                self.__currentMove = self.__move
                self.__numMoves = self.__numMoves + 1
                self.draw()
        self.Report()
        
    def Report(self):
        winner = self.checkwinner()
        print(winner, end = '')
        if winner != 'tie':
            print(' is the winner! \(^o^)/')
        else:
            print("!")

        
                         
Game = Tictactoe()
Game.game()

